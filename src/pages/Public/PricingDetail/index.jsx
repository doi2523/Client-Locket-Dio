import React, { useContext, useState, useEffect } from "react";
import { useNavigate, useParams } from "react-router-dom";
import { Copy, ArrowLeft, Check, X } from "lucide-react";
import { AuthContext } from "../../../context/AuthLocket";
import LoadingPage from "../../../components/pages/LoadingPage";
import { API_URL } from "../../../utils";
import api from "../../../lib/axios";
import axios from "axios";

const FEATURE_LABELS = {
  image_upload: "Cho ph√©p ƒëƒÉng ·∫£nh",
  video_upload: "Cho ph√©p ƒëƒÉng video",
  custom_caption: "T√πy ch·ªânh caption",
  unlimited_posts: "Kh√¥ng gi·ªõi h·∫°n b√†i vi·∫øt",
  priority_support: "H·ªó tr·ª£ ∆∞u ti√™n",
  remove_watermark: "Xo√° watermark",
  image_gif: "Caption Gif",
  image_icon: "Caption Icon",
};
// Gi·ªØ nguy√™n ph·∫ßn import v√† khai b√°o constants nh∆∞ ban ƒë·∫ßu...

const renderFeatureFlags = (flags) => {
  const maxUploads = flags.max_uploads;

  return (
    <div className="collapse collapse-arrow bg-base-100 border border-base-300 rounded-box mb-4">
      <input type="checkbox" className="peer" />
      <div className="collapse-title text-sm sm:text-base font-semibold text-base-content">
        Chi ti·∫øt t√≠nh nƒÉng c·ªßa g√≥i
      </div>
      <div className="collapse-content">
        <div className="grid sm:grid-cols-2 gap-4">
          {typeof maxUploads === "object" && (
            <>
              <div className="flex items-center gap-3 p-3 rounded-xl border bg-blue-50 border-blue-200">
                <span className="text-blue-600 font-semibold">
                  üñºÔ∏è {maxUploads.image}MB
                </span>
                <span className="text-blue-800 text-sm">
                  Dung l∆∞·ª£ng ·∫£nh / b√†i
                </span>
              </div>
              <div className="flex items-center gap-3 p-3 rounded-xl border bg-blue-50 border-blue-200">
                <span className="text-blue-600 font-semibold">
                  üìπ {maxUploads.video}MB
                </span>
                <span className="text-blue-800 text-sm">
                  Dung l∆∞·ª£ng video / b√†i
                </span>
              </div>
            </>
          )}

          {Object.entries(flags).map(([key, value]) => {
            if (key === "max_uploads") return null;

            const isActive = !!value;
            return (
              <div
                key={key}
                className={`flex items-center gap-3 p-3 rounded-xl border transition ${
                  isActive
                    ? "bg-green-50 border-green-200"
                    : "bg-base-300 border-gray-200"
                }`}
              >
                {isActive ? (
                  <Check className="w-5 h-5 text-green-600" />
                ) : (
                  <X className="w-5 h-5 text-gray-400" />
                )}
                <span
                  className={`text-sm ${
                    isActive
                      ? "text-green-800 font-medium"
                      : "text-gray-400 line-through"
                  }`}
                >
                  {FEATURE_LABELS[key] || key}
                </span>
              </div>
            );
          })}
        </div>
      </div>
    </div>
  );
};

export default function PlanDetailPage() {
  const { user, userPlan } = useContext(AuthContext);
  const { planId } = useParams();
  const navigate = useNavigate();
  const [copySuccess, setCopySuccess] = useState("");
  const [planData, setPlanData] = useState(null);
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    const fetchPlanData = async () => {
      try {
        const response = await fetch(`${API_URL.GET_DIO_PLANS}/${planId}`);
        const data = await response.json();
        setPlanData(data);
      } catch (error) {
        console.error("Error fetching plan:", error);
      } finally {
        setLoading(false);
      }
    };
    fetchPlanData();
  }, [planId]);

  const handleBack = () => navigate(-1);

  const [loadingcreate, setLoadingCreate] = useState(false);
  const [showExistingOrderModal, setShowExistingOrderModal] = useState(false);
  const [pendingOrderId, setPendingOrderId] = useState(null);

  const handleCreateOrder = async () => {
    try {
      setLoadingCreate(true);

      // G·ª≠i API t·∫°o ƒë∆°n h√†ng (axios-style)
      const response = await api.post("/api/orders", {
        planId: planData.id,
        price: planData.price,
      });

      const data = response.data;

      if (data?.ExistingOrder) {
        const confirm = window.confirm(
          "B·∫°n ƒë√£ c√≥ ƒë∆°n h√†ng ƒëang ch·ªù thanh to√°n.\nB·∫•m OK ƒë·ªÉ ti·∫øp t·ª•c thanh to√°n ho·∫∑c Cancel ƒë·ªÉ hu·ª∑."
        );

        if (!confirm) {
          // G·ªçi API hu·ª∑ ƒë∆°n h√†ng
          try {
            await api.post("/api/orders/cancel", {
              ExistingOrder: data.ExistingOrder,
              orderCode: data.orderCode, // n·∫øu c·∫ßn cho PayOS
              orderId: data.orderId,
            });

            alert("‚úÖ ƒê∆°n h√†ng ƒë√£ ƒë∆∞·ª£c hu·ª∑.");
          } catch (error) {
            console.error("‚ùå L·ªói khi hu·ª∑ ƒë∆°n h√†ng:", error);
            alert("‚ùå Kh√¥ng th·ªÉ hu·ª∑ ƒë∆°n h√†ng. Vui l√≤ng th·ª≠ l·∫°i.");
          }

          return; // D·ª´ng flow ti·∫øp theo
        }
      }

      // Ki·ªÉm tra n·∫øu response c√≥ l·ªói
      if (!data?.orderId) {
        throw new Error("T·∫°o ƒë∆°n h√†ng th·∫•t b·∫°i");
      }

      // ƒêi·ªÅu h∆∞·ªõng sang trang thanh to√°n
      navigate(`/pay?orderId=${data.orderId}`);
    } catch (error) {
      console.error("L·ªói khi t·∫°o ƒë∆°n h√†ng:", error);
      alert("Kh√¥ng th·ªÉ t·∫°o ƒë∆°n h√†ng. Vui l√≤ng th·ª≠ l·∫°i.");
    } finally {
      setLoadingCreate(false);
    }
  };

  if (loading) return <LoadingPage isLoading={true} />;
  if (!planData)
    return (
      <div className="min-h-screen flex justify-center items-center text-center text-lg text-error">
        Kh√¥ng t√¨m th·∫•y g√≥i
      </div>
    );

  return (
    <div className="min-h-screen bg-base-100">
      {/* Header Gradient */}
      <div
        className="h-16"
        style={{ background: planData.ui?.gradient || "#6366F1" }}
      ></div>

      {/* Header Content */}
      <div
        className="w-full py-6 text-white"
        style={{ background: planData.ui?.gradient || "#6366F1" }}
      >
        <div className="mx-auto px-4">
          <div className="flex items-center gap-4">
            <button
              onClick={handleBack}
              className="p-2 rounded-full hover:bg-white/20 transition-all duration-200 cursor-pointer"
              aria-label="Quay l·∫°i"
            >
              <ArrowLeft className="w-5 h-5 text-base" />
            </button>

            <div>
              <h1 className="text-3xl sm:text-4xl font-bold">
                {planData.name}
              </h1>
              <p className="text-sm sm:text-base mt-1">
                {planData.description}
              </p>
            </div>
          </div>
        </div>
      </div>

      {/* Main Layout */}
      <div className="mx-auto grid lg:grid-cols-4 gap-6 p-6">
        {/* LEFT CONTENT */}
        <div className="lg:col-span-2 space-y-6">
          {/* Th√¥ng tin g√≥i */}
          <div className="bg-base-200 rounded-2xl p-6 shadow-md">
            <div className="flex justify-between items-center mb-4">
              <h2 className="text-xl font-bold text-base-content">
                Th√¥ng tin g√≥i
              </h2>
              {planData.recommended && (
                <span className="px-3 py-1 rounded-full text-sm font-semibold bg-yellow-100 text-yellow-800">
                  ƒê·ªÅ xu·∫•t
                </span>
              )}
            </div>
            <div className="grid grid-cols-2 gap-4 text-sm">
              <div>
                <p className="text-base-content/70">Gi√°</p>
                <p className="text-2xl font-semibold text-green-600">
                  {planData.price === 0
                    ? "Mi·ªÖn ph√≠"
                    : `${planData.price.toLocaleString()}ƒë`}
                </p>
              </div>
              <div>
                <p className="text-base-content/70">Th·ªùi h·∫°n</p>
                <p className="text-lg font-medium text-blue-600">
                  {planData.duration_days} ng√†y
                </p>
              </div>
              <div>
                <p className="text-base-content/70">Dung l∆∞·ª£ng</p>
                <p className="text-lg text-primary">
                  {planData.storage_limit_mb === -1
                    ? "Kh√¥ng gi·ªõi h·∫°n"
                    : `${planData.storage_limit_mb} MB`}
                </p>
              </div>
              <div>
                <p className="text-base-content/70">S·ªë l∆∞·ª£ng ·∫£nh/video</p>
                <p className="text-lg text-primary">
                  {planData.max_uploads === -1
                    ? "Kh√¥ng gi·ªõi h·∫°n"
                    : planData.max_uploads}
                </p>
              </div>
            </div>
          </div>

          {/* T√≠nh nƒÉng n·ªïi b·∫≠t */}
          <div className="bg-base-200 rounded-2xl p-6 shadow-md">
            <h3 className="text-xl font-bold text-base-content mb-4">
              T√≠nh nƒÉng n·ªïi b·∫≠t
            </h3>
            <ul className="space-y-2">
              {planData.features?.map((feature, idx) => (
                <li key={idx} className="flex items-center gap-3 text-accent">
                  <Check className="text-green-500 w-5 h-5" />
                  {feature}
                </li>
              ))}
            </ul>
          </div>

          {/* T√≠nh nƒÉng h·ªó tr·ª£ */}
          <div className="bg-base-200 rounded-2xl p-6 shadow-md">
            <h3 className="text-xl font-bold text-base-content mb-4">
              T√≠nh nƒÉng h·ªó tr·ª£
            </h3>
            {renderFeatureFlags(planData.feature_flags)}
          </div>
        </div>

        {/* RIGHT CONTENT */}
        <div className="lg:col-span-2">
          <div className="bg-base-200 rounded-2xl shadow-md p-6 sticky top-8">
            <h3 className="text-xl font-bold text-base-content mb-4">
              Th√¥ng tin thanh to√°n
            </h3>

            <div className="flex justify-center mb-6">
              <button
                onClick={handleCreateOrder}
                disabled={loadingcreate}
                className="btn btn-primary btn-lg text-white text-base font-semibold"
              >
                {loadingcreate ? "ƒêang x·ª≠ l√Ω..." : "üí≥ Ti·∫øp t·ª•c thanh to√°n"}
              </button>
            </div>

            <div className="space-y-3 text-base">
              <div className="flex justify-between items-center bg-base-300 rounded-lg p-4">
                <p className="text-base-content/80">
                  G√≥i ƒë√£ ch·ªçn:{" "}
                  <span className="font-semibold text-base-content">
                    {planData.name}
                  </span>
                </p>
              </div>
              <div className="flex justify-between items-center bg-base-300 rounded-lg p-4">
                <p className="text-base-content/80">
                  S·ªë ti·ªÅn:{" "}
                  <span className="font-semibold text-green-600 text-lg">
                    {planData.price.toLocaleString()}ƒë
                  </span>
                </p>
              </div>
            </div>

            <div className="mt-6 p-4 bg-yellow-50 border border-yellow-200 rounded-lg">
              <h4 className="font-semibold text-yellow-800 mb-2">L∆∞u √Ω:</h4>
              <p className="text-sm text-yellow-700">
                Nh·∫•n n√∫t <strong>‚ÄúTi·∫øp t·ª•c thanh to√°n‚Äù</strong> ƒë·ªÉ ho√†n t·∫•t. Sau
                khi thanh to√°n, h·ªá th·ªëng s·∫Ω t·ª± ƒë·ªông k√≠ch ho·∫°t g√≥i trong v√≤ng{" "}
                <strong>5‚Äì10 ph√∫t</strong>. N·∫øu c√≥ v·∫•n ƒë·ªÅ, li√™n h·ªá CSKH qua{" "}
                <a
                  className="text-blue-600 underline"
                  href="https://zalo.me/0329254203"
                  target="_blank"
                  rel="noopener noreferrer"
                >
                  Zalo h·ªó tr·ª£
                </a>
                .
              </p>
            </div>

            <div className="mt-6">
              <button className="btn btn-outline w-full" onClick={handleBack}>
                ‚Üê Quay l·∫°i danh s√°ch
              </button>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
}

// cache/friendDB.js
import Dexie from "dexie";

export const friendDB = new Dexie("LocketFriendDB");

friendDB.version(2).stores({
  friendIds: "uid, createdAt", // uid l√† primary key
  friendDetails: "uid, username, badge, isCelebrity"
});

// ===== Friend IDs =====
export const setFriendIds = async (friends) => {
  try {
    // friends = [{ uid, createdAt }]
    await friendDB.friendIds.clear();
    await friendDB.friendIds.bulkPut(friends);
    // console.log(`üíæ ƒê√£ l∆∞u ${friends.length} friend IDs`);
  } catch (err) {
    console.error("‚ùå L·ªói khi l∆∞u friendIds:", err);
  }
};

export const getFriendIds = async () => {
  return await friendDB.friendIds.toArray();
};

// ===== Friend Details =====
export const setFriendDetail = async (friend) => {
  try {
    await friendDB.friendDetails.clear();
    await friendDB.friendDetails.bulkPut(friend);
  } catch (err) {
    console.error("‚ùå L·ªói khi l∆∞u friend detail:", err);
  }
};

export const setFriendDetailsBulk = async (friends) => {
  try {
    if (Array.isArray(friends) && friends.length > 0) {
      await friendDB.friendDetails.clear();
      await friendDB.friendDetails.bulkPut(friends);
    }
  } catch (err) {
    console.error("‚ùå L·ªói khi l∆∞u friend details:", err);
  }
};

// L·∫•y to√†n b·ªô friend details
export const getAllFriendDetails = async () => {
  try {
    return await friendDB.friendDetails.toArray();
  } catch (err) {
    console.error("‚ùå L·ªói khi l·∫•y to√†n b·ªô friend details:", err);
    return [];
  }
};

export const getFriendDetail = async (uid) => {
  return await friendDB.friendDetails.get(uid);
};

// ===== Xo√° Friend =====

// Xo√° 1 friendId
export const deleteFriendId = async (uid) => {
  try {
    await friendDB.friendIds.delete(uid);
  } catch (err) {
    console.error("‚ùå L·ªói khi xo√° friendId:", err);
  }
};

// Xo√° to√†n b·ªô friendIds
export const clearFriendIds = async () => {
  try {
    await friendDB.friendIds.clear();
  } catch (err) {
    console.error("‚ùå L·ªói khi xo√° to√†n b·ªô friendIds:", err);
  }
};

// Xo√° 1 friend detail
export const deleteFriendDetail = async (uid) => {
  try {
    await friendDB.friendDetails.delete(uid);
  } catch (err) {
    console.error("‚ùå L·ªói khi xo√° friend detail:", err);
  }
};

// Xo√° to√†n b·ªô friendDetails
export const clearFriendDetails = async () => {
  try {
    await friendDB.friendDetails.clear();
  } catch (err) {
    console.error("‚ùå L·ªói khi xo√° to√†n b·ªô friendDetails:", err);
  }
};

// cache/friendDB.js

export const syncFriendsWithCache = async (apiFriends) => {
  try {
    // 1. L·∫•y friend IDs trong DB
    const cachedIds = await getFriendIds();
    const cachedMap = new Map(cachedIds.map((f) => [f.uid, f]));

    // 2. T·∫°o t·∫≠p h·ª£p UID
    const apiUids = new Set(apiFriends.map((f) => f.uid));
    const cachedUids = new Set(cachedIds.map((f) => f.uid));

    // 3. X√°c ƒë·ªãnh friend m·ªõi v√† friend xo√°
    const newFriends = apiFriends.filter((f) => !cachedMap.has(f.uid));
    const removedFriends = cachedIds.filter((f) => !apiUids.has(f.uid));

    // 4. Update DB
    if (newFriends.length > 0) {
      await friendDB.friendIds.bulkPut(newFriends);
    }
    if (removedFriends.length > 0) {
      for (const f of removedFriends) {
        await deleteFriendId(f.uid);
        await deleteFriendDetail(f.uid);
      }
    }

    return { newFriends, removedFriends };
  } catch (err) {
    console.error("‚ùå syncFriendsWithCache error:", err);
    return { newFriends: [], removedFriends: [] };
  }
};


import React, { createContext, useEffect, useState, useMemo } from "react";
import PropTypes from "prop-types";
import * as utils from "../utils";
import { showInfo, showToast } from "../components/Toast";
import { fetchAndStoreFriends, fetchUser } from "../services";

export const AuthContext = createContext();

export const AuthProvider = ({ children }) => {
  const [user, setUser] = useState(utils.getUser()); //Thong tin User
  const [authTokens, setAuthTokens] = useState(() => utils.getToken()); //Thong tin Token

  const [loading, setLoading] = useState(false);

  const [friends, setFriends] = useState(() => {
    const saved = localStorage.getItem("friendsList");
    return saved ? JSON.parse(saved) : [];
  });

  // Th√™m state friendDetails v√†o context
  const [friendDetails, setFriendDetails] = useState(() => {
    const saved = localStorage.getItem("friendDetails");
    return saved ? JSON.parse(saved) : [];
  });
  // Load userPlan t·ª´ localStorage ngay khi component mount
  const [userPlan, setUserPlan] = useState(() => {
    const saved = localStorage.getItem("userPlan");
    return saved ? JSON.parse(saved) : null;
  });

  // ‚úÖ Auto refresh token m·ªói 50 ph√∫t ho·∫∑c khi token h·∫øt h·∫°n
  useEffect(() => {
    let isMounted = true;
    const refreshInterval = 50 * 60 * 1000; // 50 ph√∫t
  
    const autoRefresh = async () => {
      const { idToken, refreshToken } = authTokens || {};
  
      // N·∫øu kh√¥ng c√≥ idToken h·ª£p l·ªá, th·ª≠ refresh
      const isIdTokenValid = idToken && typeof idToken === "string" && idToken.trim() !== "";
  
      // N·∫øu kh√¥ng c√≥ refreshToken th√¨ logout
      if (!refreshToken) {
        if (isMounted) {
          console.warn("‚ö†Ô∏è Kh√¥ng c√≥ refreshToken, ti·∫øn h√†nh logout.");
          setUser(null);
          setAuthTokens(null);
          utils.removeUser();
          utils.removeToken();
          // showToast("Phi√™n ƒëƒÉng nh·∫≠p ƒë√£ h·∫øt h·∫°n. Vui l√≤ng ƒëƒÉng nh·∫≠p l·∫°i.", "error");
        }
        return;
      }
  
      // N·∫øu token kh√¥ng h·ª£p l·ªá ho·∫∑c ƒë√£ h·∫øt h·∫°n th√¨ l√†m m·ªõi
      if (!isIdTokenValid || utils.isIdTokenExpired(idToken)) {
        try {
          const res = await utils.refreshIdToken(refreshToken);
          const updatedTokens = {
            idToken: res?.data?.id_token,
            refreshToken: res?.data?.refresh_token || refreshToken,
          };
  
          console.log("üîÑ Token ƒë∆∞·ª£c l√†m m·ªõi:", updatedTokens);
  
          if (isMounted) {
            setAuthTokens(updatedTokens);
            utils.saveToken(updatedTokens);
          }
        } catch (err) {
          console.error("‚ùå Refresh token th·∫•t b·∫°i:", err);
          if (isMounted) {
            setUser(null);
            setAuthTokens(null);
            utils.removeUser();
            utils.removeToken();
            showInfo("Phi√™n ƒëƒÉng nh·∫≠p ƒë√£ h·∫øt h·∫°n. Vui l√≤ng ƒëƒÉng nh·∫≠p l·∫°i.");
          }
        }
      }
    };
  
    autoRefresh(); // G·ªçi ngay khi kh·ªüi ƒë·ªông
    const interval = setInterval(autoRefresh, refreshInterval); // G·ªçi ƒë·ªãnh k·ª≥
  
    return () => {
      isMounted = false;
      clearInterval(interval);
    };
  }, [authTokens]);

  // Load friends
  useEffect(() => {
    const fetchFriends = async () => {
      if (!user?.idToken || !user?.localId) return;

      // Ki·ªÉm tra xem localStorage ƒë√£ c√≥ friendsList ch∆∞a
      const savedFriends = localStorage.getItem("friendsList");
      if (savedFriends) {
        try {
          const parsed = JSON.parse(savedFriends);
          if (Array.isArray(parsed) && parsed.length > 0) {
            setFriends(parsed);
            return; // Kh√¥ng g·ªçi API v√¨ ƒë√£ c√≥ data
          }
        } catch {
          // N·∫øu JSON parse l·ªói th√¨ ti·∫øp t·ª•c fetch API
        }
      }

      // N·∫øu ch∆∞a c√≥ ho·∫∑c parse l·ªói, g·ªçi API l·∫•y danh s√°ch b·∫°n b√®
      try {
        const friendsList = await fetchAndStoreFriends(user.idToken, user.localId);
        setFriends(friendsList);
        localStorage.setItem("friendsList", JSON.stringify(friendsList));
      } catch (error) {
        console.error("‚ùå L·ªói khi fetch friends:", error);
      }
    };

    fetchFriends();
  }, [user]);

  // Load friendDetails v√† l∆∞u v√†o state + localStorage
  useEffect(() => {
    const loadFriendDetails = async () => {
      if (!user?.idToken || friends.length === 0) return;

      // Ki·ªÉm tra localStorage c√≥ friendDetails ch∆∞a
      const savedDetails = localStorage.getItem("friendDetails");
      if (savedDetails) {
        try {
          const parsedDetails = JSON.parse(savedDetails);
          if (Array.isArray(parsedDetails) && parsedDetails.length > 0) {
            setFriendDetails(parsedDetails);
            return; // c√≥ r·ªìi th√¨ th√¥i, kh√¥ng g·ªçi API
          }
        } catch {
          // l·ªói parse th√¨ v·∫´n g·ªçi API ti·∫øp
        }
      }

      const batchSize = 20;
      const allResults = [];

      for (let i = 0; i < friends.length; i += batchSize) {
        const batch = friends.slice(i, i + batchSize);

        try {
          const results = await Promise.all(
            batch.map(friend =>
              fetchUser(friend.uid, user.idToken)
                .then(res => utils.normalizeFriendData(res.data))
                .catch(err => {
                  console.error(`‚ùå fetchUser(${friend.uid}) failed:`, err?.response?.data || err);
                  return null;
                })
            )
          );

          const filtered = results.filter(Boolean);
          allResults.push(...filtered);
        } catch (err) {
          console.error("‚ùå L·ªói khi x·ª≠ l√Ω batch:", err);
        }
      }

      setFriendDetails(allResults);
      try {
        localStorage.setItem("friendDetails", JSON.stringify(allResults));
      } catch (e) {
        console.error("‚ùå L·ªói khi l∆∞u v√†o localStorage:", e);
      }
    };

    loadFriendDetails();
  }, [friends, user?.idToken]);

  // Load ho·∫∑c ƒëƒÉng k√Ω g√≥i Free khi user v√† token c√≥
  useEffect(() => {
    if (!user?.localId || !authTokens?.idToken) return;

    setLoading(true);
    (async () => {
      try {
        let plan = await utils.fetchUserPlan(user.localId, authTokens.idToken);
        if (!plan) {
          const res = await utils.registerFreePlan(user, authTokens.idToken);
          if (res?.data) {
            plan = res.data;
            // showInfo("B·∫°n ƒë√£ ƒë∆∞·ª£c ƒëƒÉng k√Ω g√≥i Free t·ª± ƒë·ªông.");
          }
        }
        setUserPlan(plan);
      } catch (err) {
        console.error("L·ªói khi l·∫•y ho·∫∑c ƒëƒÉng k√Ω g√≥i user:", err);
      } finally {
        setLoading(false);
      }
    })();
  }, [user, authTokens]);

  return useMemo(
    () => (
      <AuthContext.Provider value={{ user, setUser, loading, friends, setFriends, friendDetails, setFriendDetails, userPlan, setUserPlan }}>
        {children}
      </AuthContext.Provider>
    ),
    [user, loading, friends, friendDetails, userPlan]
  );
};

AuthProvider.propTypes = {
  children: PropTypes.node.isRequired,
};


import axios from "axios";
import * as utils from "../utils";

//Login
export const login = async (email, password) => {
  try {
    const res = await axios.post(
      utils.API_URL.LOGIN_URL_V2,
      { email, password },
      { withCredentials: true } // Nh·∫≠n cookie t·ª´ server
    );

    // Ki·ªÉm tra n·∫øu API tr·∫£ v·ªÅ l·ªói nh∆∞ng v·∫´n c√≥ status 200
    if (res.data?.success === false) {
      console.error("Login failed:", res.data.message);
      return null;
    }

    return res.data; // Tr·∫£ v·ªÅ d·ªØ li·ªáu t·ª´ server
  } catch (error) {
    if (error.response && error.response.data?.error) {
      throw error.response.data.error; // ‚¨ÖÔ∏è N√©m l·ªói t·ª´ `error.response.data.error`
    }
    console.error("‚ùå Network Error:", error.message);
    throw new Error("C√≥ s·ª± c·ªë khi k·∫øt n·ªëi ƒë·∫øn h·ªá th·ªëng, vui l√≤ng th·ª≠ l·∫°i sau √≠t ph√∫t.");
  }
};
export const refreshIdToken = async (refreshToken) => {
  try {
    const res = await axios.post(
      utils.API_URL.REFESH_TOKEN_URL,
      { refreshToken },
      { withCredentials: true } // Nh·∫≠n cookie t·ª´ server
    );
    // Ki·ªÉm tra n·∫øu API tr·∫£ v·ªÅ l·ªói nh∆∞ng v·∫´n c√≥ status 200
    // if (res.data?.success === false) {
    //   console.error("Login failed:", res.data.message);
    //   return null;
    // }

    return res.data.idToken; // Tr·∫£ v·ªÅ d·ªØ li·ªáu t·ª´ server
  } catch (error) {
    if (error.response && error.response.data?.error) {
      throw error.response.data.error; // ‚¨ÖÔ∏è N√©m l·ªói t·ª´ `error.response.data.error`
    }
    console.error("‚ùå Network Error:", error.message);
    throw new Error("C√≥ s·ª± c·ªë khi k·∫øt n·ªëi ƒë·∫øn h·ªá th·ªëng, vui l√≤ng th·ª≠ l·∫°i sau √≠t ph√∫t.");
  }
};
//Logout
export const logout = async () => {
  try {
    const response = await axios.get(utils.API_URL.LOGOUT_URL, {
      withCredentials: true,
    });
    return response.data; // ‚úÖ Tr·∫£ v·ªÅ d·ªØ li·ªáu t·ª´ API (v√≠ d·ª•: { message: "ƒê√£ ƒëƒÉng xu·∫•t!" })
  } catch (error) {
    console.error(
      "‚ùå L·ªói khi ƒëƒÉng xu·∫•t:",
      error.response?.data || error.message
    );
    throw error.response?.data || error.message; // ‚úÖ Tr·∫£ v·ªÅ l·ªói n·∫øu c√≥
  }
};
export const getInfocheckAuth = async (idToken, localId) => {
  try {
    if (!idToken) {
      throw new Error("Thi·∫øu idToken! Vui l√≤ng ƒëƒÉng nh·∫≠p l·∫°i.");
    }

    const res = await axios.post(utils.API_URL.CHECK_AUTH_URL, {
      idToken,
      localId,
    });

    return res.status; // Ch·ªâ tr·∫£ v·ªÅ status
  } catch (error) {
    console.error("‚ùå L·ªói khi ki·ªÉm tra x√°c th·ª±c:", error);

    if (error.response) {
      throw new Error(error.response.status); // QuƒÉng l·ªói v·ªõi m√£ tr·∫°ng th√°i t·ª´ server
    } else if (error.request) {
      throw new Error("503"); // L·ªói k·∫øt n·ªëi, gi·∫£ ƒë·ªãnh m√£ 503 (Service Unavailable)
    } else {
      throw new Error("500"); // L·ªói kh√¥ng x√°c ƒë·ªãnh, gi·∫£ ƒë·ªãnh m√£ 500
    }
  }
};
export const getInfo = async (idToken, localId) => {
  try {
    if (!idToken) {
      throw new Error("Thi·∫øu idToken! Vui l√≤ng ƒëƒÉng nh·∫≠p l·∫°i.");
    }

    const res = await axios.post(utils.API_URL.GET_INFO_URL, {
      idToken,
      localId,
    });

    if (!res.data || !res.data.user) {
      throw new Error("D·ªØ li·ªáu tr·∫£ v·ªÅ kh√¥ng h·ª£p l·ªá!");
    }

    return res.data.user;
  } catch (error) {
    let errorMessage = "L·ªói kh√¥ng x√°c ƒë·ªãnh!";

    if (error.response) {
      // L·ªói t·ª´ server
      errorMessage = error.response.data?.message || "L·ªói t·ª´ server!";
    } else if (error.request) {
      // L·ªói k·∫øt n·ªëi (kh√¥ng nh·∫≠n ƒë∆∞·ª£c ph·∫£n h·ªìi)
      errorMessage = "Kh√¥ng th·ªÉ k·∫øt n·ªëi ƒë·∫øn server! Ki·ªÉm tra m·∫°ng c·ªßa b·∫°n.";
    } else {
      // L·ªói kh√°c
      errorMessage = error.message;
    }

    console.error("‚ùå L·ªói khi l·∫•y th√¥ng tin ng∆∞·ªùi d√πng:", errorMessage);
    throw new Error(errorMessage); // QuƒÉng l·ªói ƒë·ªÉ x·ª≠ l√Ω trong component
  }
};
//Get Momemnt
export const getLatestMoment = async (idToken) => {
  try {
    const res = await axios.post(
      utils.API_URL.GET_LASTEST_URL,
      { idToken },
      { withCredentials: true }
    );

    console.log("Moment m·ªõi nh·∫•t:", res.data);
    return res.data;
  } catch (error) {
    console.error("L·ªói khi l·∫•y moment:", error.response?.data || error.message);
    throw error; // QuƒÉng l·ªói ƒë·ªÉ x·ª≠ l√Ω trong component
  }
};
export const uploadMedia = async (formData, setUploadProgress) => {
  let timeOutId;
  try {
    const fileType = formData.get("images") ? "image" : "video";
    
    // Th·ªùi gian ch·ªù t√πy v√†o lo·∫°i file
    timeOutId = setTimeout(() => {
      console.log("‚è≥ Uploading is taking longer than expected...");
    }, fileType === "image" ? 5000 : 10000);

    const response = await axios.post(
      utils.API_URL.UPLOAD_MEDIA_URL,
      formData,
      {
        headers: { "Content-Type": "multipart/form-data" },
        onUploadProgress: (progressEvent) => {
          if (setUploadProgress && typeof setUploadProgress === "function") {
            const percent = Math.round(
              (progressEvent.loaded * 100) / progressEvent.total
            );
            let currentProgress = 0;
            if (percent > currentProgress) {
              const updateProgress = (target) => {
                if (currentProgress < target) {
                  currentProgress += 1;
                  setUploadProgress(currentProgress);
                  setTimeout(() => updateProgress(target), 50);
                }
              };
              updateProgress(percent);
            }
          }
        },
      }
    );

    clearTimeout(timeOutId);
    console.log("‚úÖ Upload th√†nh c√¥ng:", response.data);
    return response.data;
  } catch (error) {
    clearTimeout(timeOutId);
    
    // Log l·ªói chi ti·∫øt h∆°n
    console.error("‚ùå L·ªói khi upload:", error.response?.data || error.message);
    
    if (error.response) {
      // X·ª≠ l√Ω l·ªói t·ª´ server
      console.error("Server Error:", error.response);
    } else {
      // X·ª≠ l√Ω l·ªói k·∫øt n·ªëi ho·∫∑c kh√°c
      console.error("Network Error:", error.message);
    }
    
    throw error;
  }
};
export const uploadMediaV2 = async (payload) => {
  try {
    // L·∫•y mediaInfo t·ª´ payload
    const { mediaInfo } = payload;
    // L·∫•y type t·ª´ mediaInfo ƒë·ªÉ x√°c ƒë·ªãnh l√† ·∫£nh hay video
    const fileType = mediaInfo.type;

    // ƒê·∫∑t timeout t√πy theo lo·∫°i t·ªáp (·∫£nh ho·∫∑c video)
    const timeoutDuration = fileType === "image" ? 5000 : fileType === "video" ? 10000 : 5000;
    const timeoutId = setTimeout(() => {
      console.log("‚è≥ Uploading is taking longer than expected...");
    }, timeoutDuration);

    // G·ª≠i request v·ªõi payload v√† header Content-Type: application/json
    const response = await axios.post(utils.API_URL.UPLOAD_MEDIA_URL, payload, {
      headers: {
        "Content-Type": "application/json", // S·ª≠ d·ª•ng JSON thay v√¨ FormData
      },
    });

    clearTimeout(timeoutId);  // H·ªßy timeout khi upload th√†nh c√¥ng
    console.log("‚úÖ Upload th√†nh c√¥ng:", response.data);
    return response.data;
  } catch (error) {
    console.error("‚ùå L·ªói khi upload:", error.response?.data || error.message);

    if (error.response) {
      console.error("üì° Server Error:", error.response);
    } else {
      console.error("üåê Network Error:", error.message);
    }

    throw error;
  }
};


